<?xml version="1.0"?>

<!-- TODO -->
<!-- update masses in the inertia declarations -->
<!-- Double-check box_inertia and make sure its correct -->

<robot name="horizon_zed" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Constraints -->
  <!-- m and kg-->
  <!-- m = ft / 3.281 -->
  <xacro:arg name="camera_name"   default="zed" />
  <xacro:arg name="camera_model"  default="zed2i" />
  <xacro:include filename="$(find zed_wrapper)/urdf/zed_macro.urdf.xacro" />
  

  <xacro:property name="box_length" value="${3 / 3.281}"/>
  <xacro:property name="box_width" value="${2 / 3.281}"/>
  <xacro:property name="box_height" value="${(16 / 12) / 3.281}"/> <!-- 16 in. -->

  <xacro:property name="tower_length" value="${(37 / 12) / 3.281}"/> <!-- 3 ft + 1 in. for top bar-->

  <xacro:property name="wheel_radius" value="${((14.5 / 12) / 2) / 3.281}"/> <!-- 14.5 in. diameter -->
  <xacro:property name="wheel_width" value="${(3.35 / 12) / 3.281}"/>

  <xacro:property name="front_caster_radius" value="${(2 / 12) / 3.281}"/><!-- 4 in. diameter -->
  <xacro:property name="rear_caster_radius" value="${(1 / 12) / 3.281}"/><!-- 2 in. diameter -->

  <!-- Intertia property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi / 2} 0 ${pi / 2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m / 12) * (h * h + d * d)}" ixy="0.0" ixz="0.0" iyy="${(m / 12) * (w * w + d * d)}" iyz="0.0" izz="${(m / 12) * (w * w + h * h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi / 2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m / 12) * (3 * r * r + h * h)}" ixy = "0" ixz = "0" iyy="${(m / 12) * (3 * r * r + h * h)}" iyz = "0" izz="${(m / 2) * (r * r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2 / 5) * m * (r * r)}" ixy="0.0" ixz="0.0" iyy="${(2 / 5) * m * (r * r)}" iyz="0.0" izz="${(2 / 5) * m * (r * r)}"/>
    </inertial>
  </xacro:macro>

  <!-- Links -->

  <!-- Robot Footprint -->
  <link name="base_footprint"/>

  <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${box_length} ${box_width} ${box_height}"/>
      </geometry>
      <material name="blue">
        <color rgba="0 0 1 1"/>
      </material>
    </visual>

    <collision>
      <geometry>
        <box size="${box_length} ${box_width} ${box_height}"/>
      </geometry>
    </collision>

    <!-- yes, these are switched around on purpose -->
    <xacro:box_inertia m="15" w="${box_length}" d="${box_height}" h="${box_width}"/>
  </link>

  <xacro:zed_camera name="$(arg camera_name)" model="$(arg camera_model)" enable_gnss="false">
    <gnss_origin xyz="0 0 0" rpy="0 0 0"/>
  </xacro:zed_camera>

  <!-- Sensor Tower -->
  <link name="sensor_tower">
    <visual>
      <geometry>
        <box size="${(1 / 12) / 3.281} ${(1 / 12) / 3.281} ${tower_length}"/>
      </geometry>
      <material name="green">
        <color rgba="0 1 0 1"/>
      </material>
    </visual>

    <collision>
      <geometry>
        <box size="${(1 / 12) / 3.281} ${(1 / 12) / 3.281} ${tower_length}"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="5" w="${box_length}" d="${box_height}" h="${box_width}"/>
  </link>

  <!-- Motored Wheels -->
  <!-- Left Side -->
  <link name="left_wheel">
    <visual>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </visual>

    <collision>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>

    <xacro:cylinder_inertia m="2.5" r="${wheel_radius}" h="${wheel_width}"/>
  </link>

  <!-- Right Side -->
  <link name="right_wheel">
    <visual>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </visual>

    <collision>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>

    <xacro:cylinder_inertia m="2.5" r="${wheel_radius}" h="${wheel_width}"/>
  </link>

  <!-- Caster Wheels -->
  <!-- Front -->
  <link name="front_caster">
    <visual>
      <geometry>
        <sphere radius="${front_caster_radius}"/>
      </geometry>
    </visual>

    <collision>
      <geometry>
        <sphere radius="${front_caster_radius}"/>
      </geometry>
    </collision>

    <xacro:sphere_inertia m="0.5" r="${front_caster_radius}"/>
  </link>

  <!-- Rear -->
  <link name="rear_caster">
    <visual>
      <geometry>
        <sphere radius="${rear_caster_radius}"/>
      </geometry>
    </visual>

    <collision>
      <geometry>
        <sphere radius="${rear_caster_radius}"/>
      </geometry>
    </collision>

    <xacro:sphere_inertia m="0.25" r="${rear_caster_radius}"/>
  </link>

  <!-- IMU -->
  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>

    <collision>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
  </link>

  <!-- Depth camera -->
  <!-- <link name="camera_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.015 0.130 0.022"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.015 0.130 0.022"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.23"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>
  </link>

  <link name="camera_depth_frame"/> -->

  <!-- GPS -->
  <link name="gps_link">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>

    <collision>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
  </link>

  <!-- Joints -->

  <!-- Motored Wheel Joints -->
  <joint name="left_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="left_wheel"/>
    <origin xyz="0 ${(box_width / 2) + (wheel_width / 2)} ${-(box_height / 6) - 0.001}" rpy="${-pi / 2} 0 0"/>
    <axis xyz="0 0 1"/>
  </joint>

  <joint name="right_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="right_wheel"/>
    <!-- Offset wheels slightly so only they are touching the ground -->
    <origin xyz="0 ${(-box_width / 2) + (-wheel_width / 2)} ${-(box_height / 6) - 0.001}" rpy="${-pi / 2} 0 0"/>
    <axis xyz="0 0 1"/>
  </joint>

  <!-- Caster Wheel Joints -->
  <joint name="front_caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin xyz="${(box_length / 2) - front_caster_radius} 0 ${-box_height / 2}" rpy="0 0 0"/>
  </joint>

  <joint name="rear_caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="rear_caster"/>
    <origin xyz="${(-box_length / 2) + rear_caster_radius} 0 ${-box_height / 2}" rpy="0 0 0"/>
  </joint>

  <!-- IMU Joint -->
  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 0.01"/>
  </joint>

  <!-- Depth camera Joints -->
  <!-- <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="${((1/12)/3.281)} 0 ${(tower_length-((3/12)/3.281))+(0.022/2)}" rpy="0 ${12*(pi/180)} 0"/>
  </joint>

  <joint name="camera_depth_joint" type="fixed">
    <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    <parent link="camera_link"/>
    <child link="camera_depth_frame"/>
  </joint> -->

  <!-- Add a joint to connect the ZED Camera to the robot -->
  <joint name="$(arg camera_name)_joint" type="fixed">
    <parent link="base_link"/>
    <child link="$(arg camera_name)_camera_link"/>
    <origin xyz="${(-(14 / 12) / 3.281)} 0 ${((49 / 12) / 3.281)}" rpy="0 ${40 * (pi / 180)} 0" />
  </joint>
  
  <!-- GPS Joint -->
  <joint name="gps_joint" type="fixed">
    <parent link="base_link"/>
    <child link="gps_link"/>
    <origin xyz="0 0 ${box_height / 2}"/>
  </joint>

  <!-- Sensor Tower Joint -->
  <joint name="sensor_tower_joint" type="fixed">
    <parent link="base_link"/>
    <child link="sensor_tower"/>
    <origin xyz="${(box_length / 2) - ((1 / 12) / 3.281)} 0 ${(tower_length / 2) + (box_height / 2) - ((8 / 12) / 3.281)}" rpy="0 0 0"/>
  </joint>

  <!-- Robot Base Joint -->
  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0 0 -0.15" rpy="0 0 0"/>
  </joint>

  <!-- Gazebo IMU -->
  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
          <ros>
            <namespace>/demo</namespace>
            <remapping>~/out:=imu</remapping>
          </ros>
          <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

  <!-- Gazebo Diff Drive -->
  <gazebo>
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
      <ros>
        <namespace>/demo</namespace>
      </ros>

      <!-- wheels -->
      <left_joint>left_wheel_joint</left_joint>
      <right_joint>right_wheel_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>${box_width + ((2 / 12) / 3.281)}</wheel_separation>
      <wheel_diameter>${wheel_radius * 2}</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>50</max_wheel_torque>
      <max_wheel_acceleration>5.0</max_wheel_acceleration>
      <!-- TODO This probably needs to be modified? no idea what units-->

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>false</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>
  </gazebo>

  <!-- Gazebo Depth Camera -->
  <!-- <gazebo reference="camera_link">
    <sensor name="depth_camera" type="depth">
      <visualize>true</visualize>
      <update_rate>30.0</update_rate>
      <camera name="camera">
        <horizontal_fov>1.919862</horizontal_fov>
        <image>
          <width>1280</width>
          <height>720</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>10</far>
        </clip>
      </camera>
      <plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <frame_name>camera_depth_frame</frame_name>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortionK1>0</distortionK1>
        <distortionK2>0</distortionK2>
        <distortionK3>0</distortionK3>
        <distortionT1>0</distortionT1>
        <distortionT2>0</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo> -->

  <!-- Gazebo GPS -->
  <gazebo reference="gps_link">
    <sensor name="gps_sensor" type="gps">
      <plugin name="gps" filename="libgazebo_ros_gps_sensor.so">
        <ros>
          <remapping>~/out:=/gps/fix</remapping>
        </ros>
      </plugin>
      <always_on>true</always_on>
      <update_rate>30</update_rate>
      <pose>0 0 0 0 0 0</pose>
      <gps>
        <position_sensing>
          <horizontal>
            <!-- <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.005</stddev>
            </noise> -->
          </horizontal>
          <vertical>
            <!-- <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.005</stddev>
            </noise> -->
          </vertical>
        </position_sensing>
      </gps>
    </sensor>
  </gazebo>
</robot>